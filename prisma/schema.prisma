// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model SocialNetwork {
  id   Int    @id
  name String
  Tuto Tuto[]
}

model User {
  id               Int                @id @default(autoincrement())
  email            String             @unique
  lastName         String
  firstName        String
  password         String?
  activate         Boolean            @default(false)
  codeActivate     Int?
  SocialAccount    SocialAccount[]
  Board            Board[]
  RefreshTokenUser RefreshTokenUser[]
  ForgotPassword   ForgotPassword[]
  createdAt        DateTime           @default(now())
}

model SocialAccount {
  id         Int    @id @default(autoincrement())
  provider   String
  providerId String @unique
  User       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
}

model ForgotPassword {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [idUser], references: [id], onDelete: Cascade)
  idUser     Int      @unique
  codeForgot Int
  createdAt  DateTime @default(now())
}

model RefreshTokenUser {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [idUser], references: [id], onDelete: Cascade)
  idUser       Int
  idDevice     String   @unique
  Notification String?  @unique
  refreshToken String
  updatedAt    DateTime @default(now()) @updatedAt
}

model Board {
  id         Int         @id @default(autoincrement())
  InBoard    Int?
  name       String
  boardImage BoardImage? @relation(fields: [idImage], references: [id])
  idImage    Int?
  user       User        @relation(fields: [idUser], references: [id], onDelete: Cascade)
  idUser     Int
  Tuto       Tuto[]
  createdAt  DateTime    @default(now())
}

model BoardModel {
  id   Int    @id
  name String
}

model BoardImage {
  id    Int     @id
  name  String  @unique
  board Board[]
}

model Tuto {
  id             Int           @id @default(autoincrement())
  title          String?
  image          String?       @db.LongText
  SocialNetworks SocialNetwork @relation(fields: [idSocial], references: [id])
  idSocial       Int
  URL            String        @db.LongText
  board          Board         @relation(fields: [idBoard], references: [id], onDelete: Cascade)
  idBoard        Int
  createdAt      DateTime      @default(now())
}
